#+TITLE: Missing Semester
#+STARTUP: overview

[[https://missing.csail.mit.edu][The Missing Semester of Your CS Education]]

* DONE Lecture 01: Course Overview + The Shell

Let's assume that =foo= is a file that only root can modify.

#+begin_src shell
  echo 500 > foo
#+end_src

The command above won't work when run as a regular user.

#+begin_src shell
  sudo echo 500 > foo
#+end_src

This one won't work either. =sudo= is being used for =echo= only.
Redirection =>= just takes the output and tries to write it to the =foo= file as a regular user.

To solve this one could login as root and run the command again.

It can be done without switching to the root's shell though.

#+begin_src shell
  echo 500 | sudo tee foo
#+end_src

=tee= copies standard input to standard output and making a copy in zero or more files.

=xdg-open= opens a file or URL in the user's preferred application.

* DONE Lecture 02: Shell Tools and Scripting

This class was about scripting in =bash=.

=$0= script name
=$1= - =$9= arguments to the script
=$@= all the arguments
=$#= number of arguments
=$?= return code of the previous command
=$$= PID
=!!= entire last command, including arguments

Inside the script file we can get the passed argument by using =$1= up to =$9=.
We can also use =$@= to get all arguments at once.

#+begin_src bash
  #!/usr/bin/env bash
  # file: asd.sh
  echo "Running program $0 with $# arguments. Arguments are: $@"
#+end_src

#+begin_src shell
  ./asd.sh foo bar
  # Running program ./asd.sh with 2 arguments. Arguments are: foo bar
#+end_src

There is a difference between ="foo"= and ='foo'=. The first one can expand variables.

#+begin_src shell
  foo=bar
  echo $foo
  # bar
  echo "test $foo"
  # test bar
  echo 'test $foo'
  # test $foo
#+end_src

Bash supports control flow techniques likes =if= and =for=. Similarly, bash has functions.

#+begin_src shell
  mkcd () {
      mkdir -p "$1"
      cd "$1"
  }
#+end_src

In the example above =$1= is the first argument to the script/function.

=$?= return value of the last command

#+begin_src shell
  foo
  # bash: foo: command not found
  echo $?
  # 127
#+end_src

=$_= last argument of the last command

#+begin_src shell
  echo "foo" "bar"
  # foo bar
  echo $_
  # bar
#+end_src

=!!= repeats the last command

#+begin_src shell
  mkdir /mnt/foo
  # mkdir: /mnt/foo: Permission denied
  sudo !!
#+end_src

There are =false= and =true= commands that return =1= and =0= error codes.

#+begin_src shell
  true
  echo $?
  # 0
  false
  echo $?
  # 1
#+end_src

There are also logical operators.

#+begin_src shell
  false || echo "this will print"
  # this will print
  true || echo "nothing is printed"
  #
  false && echo "nothing is printed"
  #
  true && echo "this will print"
  # this will print
#+end_src

We can use =;= to run multiple commands in a row.

#+begin_src shell
  false ; echo "this will always print"
  # this will always print
#+end_src

We can store command result inside variable with =$(CMD)=.
=$(CMD)= will execute CMD, get the output of the command and substittue it in place.
This is called command substitution.

#+begin_src shell
  foo=$(pwd)
  echo $foo
  # /tmp
  echo "we are in $(pwd)"
  # we are in /tmp
#+end_src

We can create temporary files to store command output on the fly with =<(CMD)=.
Some commands expect file handlers so this trick can be used there.
=<(CMD)= will execute command and place the output in a temporary file and substitute the =<()= with that file's name.
This is called process substitution.

#+begin_src shell
  cat <(ls) <(ls ..)
#+end_src

We can redirect standard output with =>= and standard error with =2>=.

#+begin_src shell
  grep foo bar.txt > /dev/null 2> /dev/null
#+end_src

When doing comparison in shell (for example when using =if= statement) we can check available comparisons in =test(1)=.

[[https://github.com/koalaman/shellcheck][shellcheck]] is a shell script static analysis tool.

*Globbing* examples:
- =ls *.sh=, list only files ending with =.sh=
- =ls project?=, list content of directories named projectX where X is a single character, will enter =project1= and =project2= but not =project42=
- =convert image.{png,jpg}= will expand to =convert image.png image.jpg=

  This is really powerfull, another example =touch project{1,2}/src/test/test{1,2,3}.py=
  We can also use ranges =touch {foo,bar}/{a..j}=

Shebang is used to let shell know how to run script. To avoid hardcoding the path we can use the =env= with an argument.
#+begin_src python
  #!/usr/bin/env python
  import sys
  for arg in reversed(sys.argv[1:]):
      print(arg)
#+end_src

=find= program can find things but also do something with them.
#+begin_src shell
  find . -name "*.tmp" -exec rm {} \;
#+end_src

When piping commands, we are connecting STDOUT to STDIN, but some commands like =tar= take inputs from arguments.
To solve this we can use =xargs= command which will contruct argument list(s) from STDIN and execute utility. For example =ls | xargs rm= will delete files in the current directory.

=locate= find filenames quickly because it uses database that is recomputed periodically (via =updatedb=).

* DONE Lecture 03: Editors (vim)

I used to use vim as my main editor for a while so I was aware about most things discussed in this lecture.

There is a built-in help for commands: =:help <topic>= (example =:w= or =w=)

To change "link description" text in the example below we can use =c i [= or =c i ]= with cursor anywhere between the brackets.

#+begin_example
  [link description](link_url)
#+end_example

To remove text and the brackets use =c a [= or =c a ]=.

* DONE Lecture 04: Data Wrangling

Lecturer describes "data wrangling" as a process of changing one representation of data to some other representation. Sounds like conversion.
He gives an example of the pipe operator where we move output of one program to the input of another.

=sed(1)= is a stream editor, allows to replace content.

If we want to get rid off everything before "Disconnected from" including that text itself we can use the following sed expression:

#+begin_src shell
  sed 's/.*Disconnected from//'
#+end_src

Regexps are really powerful but some expressions can become really complicated. There are many regexp debuggers available online that can help.

Didn't know about the =uniq(1)= program, =-c= can count duplicates.

=sort -nk1,1= will run a numeric sort on the output that will start (and end) on the first column.

=awk(1)= by default parses input with the whitespace separated columns.

#+begin_src shell
  echo "123 foo" | awk '{print $2}'
#+end_src

The command above will print "foo".

=paste(1)= can be used to merge multiple lines of text.

#+begin_example
  one
  two
  three
#+end_example

If we run =paste -sd,= on the file (example) above we will get =one,two,three= back.

We can use =bc(1)= to calculate stuff.

#+begin_src shell
  echo "1 + 2 + 3" | bc
#+end_src

* DONE Lecture 05: Command-line Environment

Lecture about jobs, tmux, dotfiles and ssh.

=Ctrl-C= - SIGINT
=Ctrl-\= - SIGQUIT
=Ctrl-Z= - suspend

#+begin_src shell
  sleep 1000 &
  jobs
  bg %1
  kill -STOP %1
  jobs
  bg %1
  jobs
  kill -KILL %1
#+end_src

=ssh-copy-id= can be used to copy public key to the remote machine

* DONE Lecture 06: Version Control (git)

The following command provide contents or details of given object.

#+begin_src shell
  git cat-file -p <hash>
#+end_src

Nice defaults for the log.

#+begin_src shell
  git log --all --graph --decorate --oneline
#+end_src

If there are conflicts during the merge we can use =git mergetool=.
Remember to =git add= the file(s) once again after resolving conflicts and then =git merge --continue=.

We can specify relation between local and remote branches. This is used to stop repeating =git push origin main:main=.

#+begin_src shell
  git push origin main:main
  git branch --set-upstream-to=origin/main
  git branch -vv
  git push
#+end_src

=git clone --shallow=, useful for gigantic repos, do not clone the whole history
=git add -p=, select which changes to include (file content)

* DONE Lecture 07: Debugging and Profiling

** Logging

=lnav= - log file navigator
=journalctl= - interact with the journal logs (systemd)
=logger(1)= - make entries in the system log
=log show --last 1m=

** Debugging

All examples were made for python.

Python debugger: =python -m ipdb script.py=

To trace syscalls use =strace=.

#+begin_src shell
  sudo strace ls -l > /dev/null
  sudo strace -e lstat ls -l > /dev/null
#+end_src

=pyflakes= and =mypy= are examples of static analysis tools for python.

** Profiling

=time(1)= can be used with another command/program to measure execution time.
There is real time, user time and system time.

#+begin_src shell
  time curl cht.sh/tar
#+end_src

There are tracing and sampling profilers.
Tracing execute with the code and trace the execution.
Sampling on the other hand halt the program and analyse the stacktrace then resume and repeat at some frequency.

Python CPU profiler: =python -m cProfile -s tottime script.py=
Python MEM profiler: =python -m memory_profiler script.py=

There are also line profilers, for example: =kernprof -l -v script.py=

#+begin_src shell
  sudo perf stat stress -c 1
  sudo perf report
#+end_src

Flame graphs and call graphs can be useful to visualize data.

=ncdu= - NCurses Disk Usage
=lsof= - list open files

[[https://github.com/sharkdp/hyperfine][hyperfine]] is a command-line benchmarking tool.

* TODO Lecture 08: Metaprogramming
* TODO Lecture 09: Security and Cryptography
* TODO Lecture 10: Potpourri
* TODO Lecture 11: Q&A
